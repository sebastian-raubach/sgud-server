/*
 * This file is generated by jOOQ.
 */
package raubach.sgud.server.database.tables;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import raubach.sgud.server.database.Sgud;
import raubach.sgud.server.database.tables.records.ViewCategoriesRecord;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewCategories extends TableImpl<ViewCategoriesRecord> {

    private static final long serialVersionUID = -894012789;

    /**
     * The reference instance of <code>sgud.view_categories</code>
     */
    public static final ViewCategories VIEW_CATEGORIES = new ViewCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewCategoriesRecord> getRecordType() {
        return ViewCategoriesRecord.class;
    }

    /**
     * The column <code>sgud.view_categories.id</code>.
     */
    public final TableField<ViewCategoriesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sgud.view_categories.name</code>.
     */
    public final TableField<ViewCategoriesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>sgud.view_categories.description</code>.
     */
    public final TableField<ViewCategoriesRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sgud.view_categories.icon</code>.
     */
    public final TableField<ViewCategoriesRecord, String> ICON = createField("icon", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>sgud.view_categories.created_on</code>.
     */
    public final TableField<ViewCategoriesRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>sgud.view_categories.updated_on</code>.
     */
    public final TableField<ViewCategoriesRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>sgud.view_categories.count</code>.
     */
    public final TableField<ViewCategoriesRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>sgud.view_categories</code> table reference
     */
    public ViewCategories() {
        this(DSL.name("view_categories"), null);
    }

    /**
     * Create an aliased <code>sgud.view_categories</code> table reference
     */
    public ViewCategories(String alias) {
        this(DSL.name(alias), VIEW_CATEGORIES);
    }

    /**
     * Create an aliased <code>sgud.view_categories</code> table reference
     */
    public ViewCategories(Name alias) {
        this(alias, VIEW_CATEGORIES);
    }

    private ViewCategories(Name alias, Table<ViewCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewCategories(Name alias, Table<ViewCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sgud.SGUD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewCategories as(String alias) {
        return new ViewCategories(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewCategories as(Name alias) {
        return new ViewCategories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCategories rename(String name) {
        return new ViewCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewCategories rename(Name name) {
        return new ViewCategories(name, null);
    }
}
