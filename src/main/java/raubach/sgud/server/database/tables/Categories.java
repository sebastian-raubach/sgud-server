/*
 * This file is generated by jOOQ.
 */
package raubach.sgud.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import raubach.sgud.server.database.Indexes;
import raubach.sgud.server.database.Sgud;
import raubach.sgud.server.database.tables.records.CategoriesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Categories extends TableImpl<CategoriesRecord> {

    private static final long serialVersionUID = -1463546963;

    /**
     * The reference instance of <code>sgud.categories</code>
     */
    public static final Categories CATEGORIES = new Categories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoriesRecord> getRecordType() {
        return CategoriesRecord.class;
    }

    /**
     * The column <code>sgud.categories.id</code>.
     */
    public final TableField<CategoriesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sgud.categories.name</code>.
     */
    public final TableField<CategoriesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>sgud.categories.description</code>.
     */
    public final TableField<CategoriesRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sgud.categories.icon</code>.
     */
    public final TableField<CategoriesRecord, String> ICON = createField("icon", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>sgud.categories.created_on</code>.
     */
    public final TableField<CategoriesRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>sgud.categories.updated_on</code>.
     */
    public final TableField<CategoriesRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>sgud.categories</code> table reference
     */
    public Categories() {
        this(DSL.name("categories"), null);
    }

    /**
     * Create an aliased <code>sgud.categories</code> table reference
     */
    public Categories(String alias) {
        this(DSL.name(alias), CATEGORIES);
    }

    /**
     * Create an aliased <code>sgud.categories</code> table reference
     */
    public Categories(Name alias) {
        this(alias, CATEGORIES);
    }

    private Categories(Name alias, Table<CategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Categories(Name alias, Table<CategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sgud.SGUD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CATEGORIES_NAME, Indexes.CATEGORIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CategoriesRecord, Integer> getIdentity() {
        return Internal.createIdentity(raubach.sgud.server.database.tables.Categories.CATEGORIES, raubach.sgud.server.database.tables.Categories.CATEGORIES.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CategoriesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(raubach.sgud.server.database.tables.Categories.CATEGORIES, "KEY_categories_PRIMARY", raubach.sgud.server.database.tables.Categories.CATEGORIES.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CategoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<CategoriesRecord>>asList(
              Internal.createUniqueKey(raubach.sgud.server.database.tables.Categories.CATEGORIES, "KEY_categories_PRIMARY", raubach.sgud.server.database.tables.Categories.CATEGORIES.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Categories as(String alias) {
        return new Categories(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Categories as(Name alias) {
        return new Categories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Categories rename(String name) {
        return new Categories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Categories rename(Name name) {
        return new Categories(name, null);
    }
}
