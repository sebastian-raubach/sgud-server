/*
 * This file is generated by jOOQ.
 */
package raubach.sgud.server.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import raubach.sgud.server.database.Indexes;
import raubach.sgud.server.database.Sgud;
import raubach.sgud.server.database.tables.records.CategoryImagesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryImages extends TableImpl<CategoryImagesRecord> {

    private static final long serialVersionUID = 27873963;

    /**
     * The reference instance of <code>sgud.category_images</code>
     */
    public static final CategoryImages CATEGORY_IMAGES = new CategoryImages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryImagesRecord> getRecordType() {
        return CategoryImagesRecord.class;
    }

    /**
     * The column <code>sgud.category_images.category_id</code>.
     */
    public final TableField<CategoryImagesRecord, Integer> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sgud.category_images.image_id</code>.
     */
    public final TableField<CategoryImagesRecord, Integer> IMAGE_ID = createField("image_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>sgud.category_images</code> table reference
     */
    public CategoryImages() {
        this(DSL.name("category_images"), null);
    }

    /**
     * Create an aliased <code>sgud.category_images</code> table reference
     */
    public CategoryImages(String alias) {
        this(DSL.name(alias), CATEGORY_IMAGES);
    }

    /**
     * Create an aliased <code>sgud.category_images</code> table reference
     */
    public CategoryImages(Name alias) {
        this(alias, CATEGORY_IMAGES);
    }

    private CategoryImages(Name alias, Table<CategoryImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CategoryImages(Name alias, Table<CategoryImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sgud.SGUD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CATEGORY_IMAGES_CATEGORYIMAGES_IBFK_IMAGES, Indexes.CATEGORY_IMAGES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CategoryImagesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(raubach.sgud.server.database.tables.CategoryImages.CATEGORY_IMAGES, "KEY_category_images_PRIMARY", raubach.sgud.server.database.tables.CategoryImages.CATEGORY_IMAGES.CATEGORY_ID, raubach.sgud.server.database.tables.CategoryImages.CATEGORY_IMAGES.IMAGE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CategoryImagesRecord>> getKeys() {
        return Arrays.<UniqueKey<CategoryImagesRecord>>asList(
              Internal.createUniqueKey(raubach.sgud.server.database.tables.CategoryImages.CATEGORY_IMAGES, "KEY_category_images_PRIMARY", raubach.sgud.server.database.tables.CategoryImages.CATEGORY_IMAGES.CATEGORY_ID, raubach.sgud.server.database.tables.CategoryImages.CATEGORY_IMAGES.IMAGE_ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CategoryImages as(String alias) {
        return new CategoryImages(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CategoryImages as(Name alias) {
        return new CategoryImages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryImages rename(String name) {
        return new CategoryImages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryImages rename(Name name) {
        return new CategoryImages(name, null);
    }
}
