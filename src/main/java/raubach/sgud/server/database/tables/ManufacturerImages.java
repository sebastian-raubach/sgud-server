/*
 * This file is generated by jOOQ.
 */
package raubach.sgud.server.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import raubach.sgud.server.database.Indexes;
import raubach.sgud.server.database.Sgud;
import raubach.sgud.server.database.tables.records.ManufacturerImagesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ManufacturerImages extends TableImpl<ManufacturerImagesRecord> {

    private static final long serialVersionUID = 274251351;

    /**
     * The reference instance of <code>sgud.manufacturer_images</code>
     */
    public static final ManufacturerImages MANUFACTURER_IMAGES = new ManufacturerImages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManufacturerImagesRecord> getRecordType() {
        return ManufacturerImagesRecord.class;
    }

    /**
     * The column <code>sgud.manufacturer_images.manufacturer_id</code>.
     */
    public final TableField<ManufacturerImagesRecord, Integer> MANUFACTURER_ID = createField("manufacturer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sgud.manufacturer_images.image_id</code>.
     */
    public final TableField<ManufacturerImagesRecord, Integer> IMAGE_ID = createField("image_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>sgud.manufacturer_images</code> table reference
     */
    public ManufacturerImages() {
        this(DSL.name("manufacturer_images"), null);
    }

    /**
     * Create an aliased <code>sgud.manufacturer_images</code> table reference
     */
    public ManufacturerImages(String alias) {
        this(DSL.name(alias), MANUFACTURER_IMAGES);
    }

    /**
     * Create an aliased <code>sgud.manufacturer_images</code> table reference
     */
    public ManufacturerImages(Name alias) {
        this(alias, MANUFACTURER_IMAGES);
    }

    private ManufacturerImages(Name alias, Table<ManufacturerImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ManufacturerImages(Name alias, Table<ManufacturerImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sgud.SGUD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MANUFACTURER_IMAGES_MANUFACTURERIMAGES_IBFK_IMAGE, Indexes.MANUFACTURER_IMAGES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ManufacturerImagesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(raubach.sgud.server.database.tables.ManufacturerImages.MANUFACTURER_IMAGES, "KEY_manufacturer_images_PRIMARY", raubach.sgud.server.database.tables.ManufacturerImages.MANUFACTURER_IMAGES.MANUFACTURER_ID, raubach.sgud.server.database.tables.ManufacturerImages.MANUFACTURER_IMAGES.IMAGE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ManufacturerImagesRecord>> getKeys() {
        return Arrays.<UniqueKey<ManufacturerImagesRecord>>asList(
              Internal.createUniqueKey(raubach.sgud.server.database.tables.ManufacturerImages.MANUFACTURER_IMAGES, "KEY_manufacturer_images_PRIMARY", raubach.sgud.server.database.tables.ManufacturerImages.MANUFACTURER_IMAGES.MANUFACTURER_ID, raubach.sgud.server.database.tables.ManufacturerImages.MANUFACTURER_IMAGES.IMAGE_ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManufacturerImages as(String alias) {
        return new ManufacturerImages(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManufacturerImages as(Name alias) {
        return new ManufacturerImages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ManufacturerImages rename(String name) {
        return new ManufacturerImages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManufacturerImages rename(Name name) {
        return new ManufacturerImages(name, null);
    }
}
