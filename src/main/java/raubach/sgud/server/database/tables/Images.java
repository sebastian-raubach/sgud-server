/*
 * This file is generated by jOOQ.
 */
package raubach.sgud.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import raubach.sgud.server.database.Indexes;
import raubach.sgud.server.database.Sgud;
import raubach.sgud.server.database.tables.records.ImagesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Images extends TableImpl<ImagesRecord> {

    private static final long serialVersionUID = -1710203301;

    /**
     * The reference instance of <code>sgud.images</code>
     */
    public static final Images IMAGES = new Images();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImagesRecord> getRecordType() {
        return ImagesRecord.class;
    }

    /**
     * The column <code>sgud.images.id</code>.
     */
    public final TableField<ImagesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sgud.images.path</code>.
     */
    public final TableField<ImagesRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>sgud.images.created_on</code>.
     */
    public final TableField<ImagesRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>sgud.images.updated_on</code>.
     */
    public final TableField<ImagesRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>sgud.images</code> table reference
     */
    public Images() {
        this(DSL.name("images"), null);
    }

    /**
     * Create an aliased <code>sgud.images</code> table reference
     */
    public Images(String alias) {
        this(DSL.name(alias), IMAGES);
    }

    /**
     * Create an aliased <code>sgud.images</code> table reference
     */
    public Images(Name alias) {
        this(alias, IMAGES);
    }

    private Images(Name alias, Table<ImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Images(Name alias, Table<ImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sgud.SGUD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IMAGES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ImagesRecord, Integer> getIdentity() {
        return Internal.createIdentity(raubach.sgud.server.database.tables.Images.IMAGES, raubach.sgud.server.database.tables.Images.IMAGES.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ImagesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(raubach.sgud.server.database.tables.Images.IMAGES, "KEY_images_PRIMARY", raubach.sgud.server.database.tables.Images.IMAGES.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ImagesRecord>> getKeys() {
        return Arrays.<UniqueKey<ImagesRecord>>asList(
              Internal.createUniqueKey(raubach.sgud.server.database.tables.Images.IMAGES, "KEY_images_PRIMARY", raubach.sgud.server.database.tables.Images.IMAGES.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Images as(String alias) {
        return new Images(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Images as(Name alias) {
        return new Images(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Images rename(String name) {
        return new Images(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Images rename(Name name) {
        return new Images(name, null);
    }
}
